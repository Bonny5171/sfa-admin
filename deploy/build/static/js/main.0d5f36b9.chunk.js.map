{"version":3,"sources":["dataProvider.js","VisitorListAside.js","LogList.js","App.js","serviceWorker.js","index.js"],"names":["apiUrl","httpClient","fetchUtils","fetchJson","options","authenticated","token","stack","getList","resource","params","filter","filterDate","Object","keys","forEach","key","values","splitKey","split","operation","length","includes","trim","replace","escape","value","op","undefined","Array","isArray","push","console","log","pagination","page","perPage","sort","field","order","query","toLowerCase","offset","limit","url","stringify","then","headers","data","json","total","parseInt","get","pop","getOne","id","getMany","JSON","ids","getManyReference","range","target","update","method","body","updateMany","create","delete","deleteMany","useStyles","makeStyles","theme","root","breakpoints","up","width","marginRight","down","display","listItem","paddingLeft","listItemText","margin","FilterSection","label","Icon","icon","translate","useTranslate","Box","mt","alignItems","mr","Typography","variant","Aside","props","filterValues","setFilters","classes","setFilter","onSearchChange","event","job_faktory_id","FilterButton","isSelected","reduce","acc","addFilter","inverseValues","ListItem","button","onClick","selected","className","ListItemText","primary","ListItemSecondaryAction","IconButton","size","Card","CardContent","onSubmit","initialValues","handleSubmit","TextInput","resettable","helperText","source","InputProps","endAdornment","InputAdornment","position","color","onChange","EmojiFlagsIcon","dense","disablePadding","name","map","AccessTimeIcon","subMonths","startOfMonth","Date","toISOString","endOfYesterday","startOfWeek","subWeeks","LocalOfferIcon","segment","status_name","LogList","List","title","aside","VisitorListAside","Pagination","rowsPerPageOptions","filterDefaultValues","Datagrid","TextField","DateField","locales","showTime","ChipField","App","Admin","dataProvider","Resource","list","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0d5f36b9.chunk.js","sourcesContent":["import { fetchUtils } from 'react-admin';\nimport { stringify } from 'query-string';\n\nlet apiUrl = 'https://api-dot-evmdsfa-snd.appspot.com:443/account/job_log_execution';\nconst httpClient = fetchUtils.fetchJson;\nconst options = {};\noptions.user = {\n  authenticated: true,\n  token: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdGsiOiIwMEQzaDAwMDAwNTdZSzEhQVFVQVFJOEI3YUlKdEdSOHRfVUF3d2tLTnA2Wk5INkFKTjU0cVM3ZEJRTk1OYml5ZUVQanl6N0x5THBJcmlPOTBNeVVDdWVoYW1QM3h2UjFfXzZicDgwTFo3T1hIdWhJIiwiY2lkIjoiM01WRzlLaXA0SUtBWlFFVnZUSmdEZ0I2eW9fZ2gwVkxnLmI5OXE1RjkzMjR1RzZUR3JIM05WRmMuYnRzVUQzVUlIa013SVF1VHNKOWlQanFtTEZzbyIsIm9pZCI6IjAwRDNoMDAwMDA1N1lLMUVBTSIsInRpZCI6MTMsInVpZCI6IjAwNTNoMDAwMDAyWmNvc0FBQyJ9.1FauR3sF4H6gfx0eNlxYkwZwpdbvPJwwIuTQ6Vp3Xz8'\n};\n\nlet stack = 'account';\n\nexport default {\n    getList: (resource, params) => {\n\n        let filter = {};\n        let filterDate = '';\n        \n        Object.keys(params.filter).forEach(function (key) {\n            // key: the name of the object key\n\n            const defaultListOp = 'like';\n            const splitKey = key.split('@');\n            const operation = splitKey.length === 2 ? splitKey[1] : defaultListOp;\n\n            let values;\n            if (operation.includes('like')) {\n                // we split the search term in words\n                values = params.filter[key].trim().split(' ');\n            } else {\n                values = [params.filter[key]];\n            }\n\n            if (key === 'stack') {\n                stack = values;\n            } else if (key === 'created_at@lte' || key === 'created_at@gte') {\n                let filterATE = '&and=(FIELD.FILTER.VALUE)';\n                filterDate += filterATE\n                    .replace('FIELD', splitKey[0])\n                    .replace('FILTER', splitKey[1])\n                    .replace('VALUE', escape(values));\n            } else {\n                values.forEach(value => {\n                    let op = operation.includes('like') ? `${operation}.*${value}*` : `${operation}.${value}`;\n                    if (filter[splitKey[0]] === undefined) {\n                        // first operator for the key, we add it to the dict\n                        filter[splitKey[0]] = op;\n                    }\n                    else\n                    {\n                        if (!Array.isArray(filter[splitKey[0]])) {\n                            // second operator, we transform to an array\n                            filter[splitKey[0]] = [filter[splitKey[0]], op]\n                        } else {\n                            // third and subsequent, we add to array\n                            filter[splitKey[0]].push(op);\n                        }\n                    }\n                });\n            }\n\n        });\n\n        console.log('filter:', filter);\n\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            order: `${field}.${order.toLowerCase()}`,\n            offset: (page - 1) * perPage,\n            limit: perPage,\n            ...filter,\n        };\n\n        if (stack) {\n            apiUrl = apiUrl\n                .replace('/account/', `/${stack}/`)\n                .replace('/product/', `/${stack}/`)\n                .replace('/setup/', `/${stack}/`)\n                .replace('/order/', `/${stack}/`)\n                .replace('/resource/', `/${stack}/`);\n        }\n        \n        let url = `${apiUrl}?${stringify(query)}${filterDate}`;\n\n        console.log('filter: ', url);\n\n        return httpClient(url, options).then(({ headers, json }) => ({\n            data: json,\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\n        }));\n    },\n\n    getOne: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`).then(({ json }) => ({\n            data: json,\n        })),\n\n    getMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids }),\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n        return httpClient(url).then(({ json }) => ({ data: json }));\n    },\n\n    getManyReference: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify({\n                ...params.filter,\n                [params.target]: params.id,\n            }),\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n\n        return httpClient(url).then(({ headers, json }) => ({\n            data: json,\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\n        }));\n    },\n\n    update: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'PUT',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json })),\n\n    updateMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids}),\n        };\n        return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {\n            method: 'PUT',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json }));\n    },\n\n    create: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}`, {\n            method: 'POST',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({\n            data: { ...params.data, id: json.id },\n        })),\n\n    delete: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'DELETE',\n        }).then(({ json }) => ({ data: json })),\n\n    deleteMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids}),\n        };\n        return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {\n            method: 'DELETE',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json }));\n    }\n};","import * as React from 'react';\nimport { FC, ChangeEvent } from 'react';\nimport {\n    Box,\n    Card,\n    CardContent,\n    Typography,\n    IconButton,\n    InputAdornment,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemSecondaryAction,\n} from '@material-ui/core';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport LocalOfferIcon from '@material-ui/icons/LocalOfferOutlined';\nimport EmojiFlagsIcon from '@material-ui/icons/EmojiFlags';\nimport CancelIcon from '@material-ui/icons/CancelOutlined';\nimport { Form } from 'react-final-form';\nimport { TextInput, useTranslate } from 'react-admin';\nimport {\n    endOfYesterday,\n    startOfWeek,\n    subWeeks,\n    startOfMonth,\n    subMonths,\n} from 'date-fns';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        [theme.breakpoints.up('sm')]: {\n            order: -1,\n            width: '15em',\n            marginRight: '1em',\n        },\n        [theme.breakpoints.down('sm')]: {\n            display: 'none',\n        },\n    },\n    listItem: {\n        paddingLeft: '2em',\n    },\n    listItemText: {\n        margin: 0,\n    },\n}));\n\nconst Aside: FC = props => {\n    const { filterValues, setFilters } = props;\n    const classes = useStyles(props);\n    const translate = useTranslate();\n\n    console.log('filterValues', filterValues)\n    const setFilter = (values: any) => {\n        console.log('filter:', { ...filterValues, ...values });\n        setFilters({ ...filterValues, ...values });\n    };\n\n    const onSearchChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setFilter({ job_faktory_id: event.target ? event.target.value : undefined });\n    };\n\n    const onSubmit = () => undefined;\n\n    // defining this component here allows to skip passing filterValues and setFilter as props\n    const FilterButton: FC<{ label: string; value: any }> = props => {\n        const { label, value } = props;\n        const isSelected = Object.keys(value).reduce(\n            (acc, key) => acc && value[key] == filterValues[key], // eslint-disable-line eqeqeq\n            true\n        );\n\n        const addFilter = () => {\n            if (isSelected) {\n                // remove the filter\n                const inverseValues = Object.keys(value).reduce(\n                    (acc, key) => {\n                        acc[key] = undefined;\n                        return acc;\n                    },\n                    {}\n                );\n                setFilter(inverseValues);\n            } else {\n                setFilter(value);\n            }\n        };\n        return (\n            <ListItem\n                button\n                onClick={addFilter}\n                selected={isSelected}\n                className={classes.listItem}\n            >\n                <ListItemText\n                    primary={translate(label)}\n                    className={classes.listItemText}\n                />\n                {isSelected && (\n                    <ListItemSecondaryAction>\n                        <IconButton size=\"small\" onClick={addFilter}>\n                            <CancelIcon />\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                )}\n            </ListItem>\n        );\n    };\n\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n                <Form onSubmit={onSubmit} initialValues={filterValues}>\n                    {({ handleSubmit }) => (\n                        <TextInput\n                            resettable\n                            helperText={false}\n                            source=\"job_faktory_id\"\n                            label=\"Procurar\"\n                            InputProps={{\n                                endAdornment: (\n                                    <InputAdornment position=\"end\">\n                                        <SearchIcon color=\"disabled\" />\n                                    </InputAdornment>\n                                ),\n                            }}\n                            onChange={onSearchChange}\n                        />\n                    )}\n                </Form>\n\n                <FilterSection\n                    icon={EmojiFlagsIcon}\n                    label=\"Stack\"\n                />\n\n                <List dense disablePadding>\n                    {[\n                        {id: 'account', name: 'Clientes'},\n                        {id: 'product', name: 'Produtos'},\n                        {id: 'setup', name: 'Configurações'},\n                        {id: 'order', name: 'Pedidos'},\n                        {id: 'resource', name: 'Mídias'},\n                     ].map(stack => (\n                        <FilterButton\n                            value={{ stack: stack.id }}\n                            label={stack.name}\n                            key={stack.id}\n                        />\n                    ))}\n                </List>\n\n                <FilterSection\n                    icon={AccessTimeIcon}\n                    label=\"Período\"\n                />\n                <List dense disablePadding>\n                    <FilterButton\n                        value={{\n                            'created_at@gte': undefined,\n                            'created_at@lte': subMonths(\n                                startOfMonth(new Date()),\n                                1\n                            ).toISOString(),\n                        }}\n                        label=\"Mais cedo\"\n                    />\n                    <FilterButton\n                        value={{\n                            'created_at@gte': endOfYesterday().toISOString()\n                        }}\n                        label=\"Hoje\"\n                    />\n                    <FilterButton\n                        value={{\n                            'created_at@gte': startOfWeek(new Date()).toISOString()\n                        }}\n                        label=\"Esta semana\"\n                    />\n                    <FilterButton\n                        value={{\n                            'created_at@gte': subWeeks(\n                                startOfWeek(new Date()),\n                                1\n                            ).toISOString(),\n                            'created_at@lte': startOfWeek(\n                                new Date()\n                            ).toISOString(),\n                        }}\n                        label=\"Semana Anterior\"\n                    />\n                   <FilterButton\n                        value={{\n                            'created_at@gte': startOfMonth(\n                                new Date()\n                            ).toISOString()\n                        }}\n                        label=\"Este mês\"\n                    />\n                   <FilterButton\n                        value={{\n                            'created_at@gte': subMonths(\n                                startOfMonth(new Date()),\n                                1\n                            ).toISOString(),\n                            'created_at@lte': startOfMonth(\n                                new Date()\n                            ).toISOString(),\n                        }}\n                        label=\"Mês passado\"\n                    />\n                </List>\n\n                {/* <FilterSection\n                    icon={ErrorOutline}\n                    label=\"Tem erro\"\n                />\n                <List dense disablePadding>\n                    <FilterButton\n                        value={{ has_ordered: true }}\n                        label=\"Sim\"\n                    />\n                    <FilterButton\n                        value={{ has_ordered: false }}\n                        label=\"Não\"\n                    />\n                </List> */}\n\n                {/* <FilterSection\n                    icon={MailIcon}\n                    label=\"Tem newsletter\"\n                />\n                <List dense disablePadding>\n                    <FilterButton\n                        value={{ has_newsletter: true }}\n                        label=\"ra.boolean.true\"\n                    />\n                    <FilterButton\n                        value={{ has_newsletter: false }}\n                        label=\"ra.boolean.false\"\n                    />\n                </List> */}\n\n                <FilterSection\n                    icon={LocalOfferIcon}\n                    label=\"Status\"\n                />\n\n                <List dense disablePadding>\n                    {[\n                        {id: 'success', name: 'Sucesso'},\n                        {id: 'error', name: 'Erro'},\n                        {id: 'overrided', name: 'Overrided'},\n                     ].map(segment => (\n                        <FilterButton\n                            value={{ status_name: segment.id }}\n                            label={segment.name}\n                            key={segment.id}\n                        />\n                    ))}\n                </List>\n            </CardContent>\n        </Card>\n    );\n};\n\nconst FilterSection: FC<{ label: string; icon: FC }> = ({\n    label,\n    icon: Icon,\n}) => {\n    const translate = useTranslate();\n    return (\n        <Box mt={2} display=\"flex\" alignItems=\"center\">\n            <Box mr={1}>\n                <Icon />\n            </Box>\n            <Typography variant=\"overline\">{translate(label)}</Typography>\n        </Box>\n    );\n};\n\nexport default Aside;","import * as React from \"react\";\nimport { List, Datagrid, TextField, DateField, ChipField } from 'react-admin';\nimport { Pagination } from 'react-admin';\nimport { startOfMonth, subMonths } from 'date-fns';\n\nimport VisitorListAside from './VisitorListAside';\n\nexport const LogList = (props) => (\n    <List\n      {...props}\n      title=\"Logs\"\n      // filters={<PostFilter />}\n      aside={<VisitorListAside />}\n      perPage={5}\n      pagination={<Pagination rowsPerPageOptions={[5, 10, 15, 20, 40, 100]} {...props} />}      \n      filterDefaultValues={{\n        stack: 'account',\n        'created_at@gte': subMonths(\n            startOfMonth(new Date()),\n            1\n        ).toISOString(),\n        'created_at@lte': startOfMonth(\n            new Date()\n        ).toISOString(),\n      }}\n    >\n      <Datagrid>\n        <TextField source=\"id\" />\n        {/* <TextField source=\"app_id\" />*/}\n        {/* <TextField source=\"record_type_id\" />  */}\n        {/* <DateField source=\"created_at\" showTime /> */}\n\n        <DateField source=\"created_at\" locales=\"pt-BR\" showTime />\n        <DateField source=\"updated_at\" locales=\"pt-BR\" showTime />\n\n        <TextField source=\"job_faktory_id\" />\n        <TextField source=\"job_scheduler_name\" />\n        {/* <TextField source=\"schema_id\" /> */}\n        {/* <TextField source=\"doc_meta_data.Type\" /> */}\n        {/* <RichTextField source=\"doc_meta_data.Details\" /> */}\n\n        {/* <FunctionField label=\"doc_meta_data\" render={record => `${record.Type}: ${record.Details}`} /> */}\n        {/* <TextField source=\"doc_meta_data\" /> */}\n        <ChipField source=\"status_name\" />\n      </Datagrid>\n    </List>\n);","import * as React from \"react\";\nimport { Admin, Resource, } from 'react-admin';\nimport dataProvider from './dataProvider';\nimport { LogList } from './LogList'\n\nconst App = () => (\n  <Admin dataProvider={dataProvider}>\n    <Resource name=\"Job Log Execution\" list={LogList} />\n  </Admin>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}